# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTenantsResult',
    'AwaitableGetTenantsResult',
    'get_tenants',
    'get_tenants_output',
]

@pulumi.output_type
class GetTenantsResult:
    """
    A collection of values returned by getTenants.
    """
    def __init__(__self__, filters=None, id=None, tenants=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tenants and not isinstance(tenants, list):
            raise TypeError("Expected argument 'tenants' to be a list")
        pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetTenantsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence['outputs.GetTenantsTenantResult']:
        return pulumi.get(self, "tenants")


class AwaitableGetTenantsResult(GetTenantsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantsResult(
            filters=self.filters,
            id=self.id,
            tenants=self.tenants)


def get_tenants(filters: Optional[Sequence[pulumi.InputType['GetTenantsFilterArgs']]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getTenants:getTenants', __args__, opts=opts, typ=GetTenantsResult).value

    return AwaitableGetTenantsResult(
        filters=__ret__.filters,
        id=__ret__.id,
        tenants=__ret__.tenants)


@_utilities.lift_output_func(get_tenants)
def get_tenants_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTenantsFilterArgs']]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTenantsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
