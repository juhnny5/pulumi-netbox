# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AvailablePrefixArgs', 'AvailablePrefix']

@pulumi.input_type
class AvailablePrefixArgs:
    def __init__(__self__, *,
                 parent_prefix_id: pulumi.Input[int],
                 prefix_length: pulumi.Input[int],
                 status: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 is_pool: Optional[pulumi.Input[bool]] = None,
                 mark_utilized: Optional[pulumi.Input[bool]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a AvailablePrefix resource.
        """
        pulumi.set(__self__, "parent_prefix_id", parent_prefix_id)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "status", status)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_pool is not None:
            pulumi.set(__self__, "is_pool", is_pool)
        if mark_utilized is not None:
            pulumi.set(__self__, "mark_utilized", mark_utilized)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vrf_id is not None:
            pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter(name="parentPrefixId")
    def parent_prefix_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "parent_prefix_id")

    @parent_prefix_id.setter
    def parent_prefix_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "parent_prefix_id", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isPool")
    def is_pool(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_pool")

    @is_pool.setter
    def is_pool(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_pool", value)

    @property
    @pulumi.getter(name="markUtilized")
    def mark_utilized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mark_utilized")

    @mark_utilized.setter
    def mark_utilized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_utilized", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrf_id")

    @vrf_id.setter
    def vrf_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf_id", value)


@pulumi.input_type
class _AvailablePrefixState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 is_pool: Optional[pulumi.Input[bool]] = None,
                 mark_utilized: Optional[pulumi.Input[bool]] = None,
                 parent_prefix_id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AvailablePrefix resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_pool is not None:
            pulumi.set(__self__, "is_pool", is_pool)
        if mark_utilized is not None:
            pulumi.set(__self__, "mark_utilized", mark_utilized)
        if parent_prefix_id is not None:
            pulumi.set(__self__, "parent_prefix_id", parent_prefix_id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vrf_id is not None:
            pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isPool")
    def is_pool(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_pool")

    @is_pool.setter
    def is_pool(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_pool", value)

    @property
    @pulumi.getter(name="markUtilized")
    def mark_utilized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mark_utilized")

    @mark_utilized.setter
    def mark_utilized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_utilized", value)

    @property
    @pulumi.getter(name="parentPrefixId")
    def parent_prefix_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "parent_prefix_id")

    @parent_prefix_id.setter
    def parent_prefix_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_prefix_id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrf_id")

    @vrf_id.setter
    def vrf_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf_id", value)


class AvailablePrefix(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_pool: Optional[pulumi.Input[bool]] = None,
                 mark_utilized: Optional[pulumi.Input[bool]] = None,
                 parent_prefix_id: Optional[pulumi.Input[int]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test_prefix = netbox.get_prefix(cidr="10.0.0.0/24")
        test_available_prefix = netbox.AvailablePrefix("testAvailablePrefix",
            parent_prefix_id=test_prefix.id,
            prefix_length=25,
            status="active")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AvailablePrefixArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test_prefix = netbox.get_prefix(cidr="10.0.0.0/24")
        test_available_prefix = netbox.AvailablePrefix("testAvailablePrefix",
            parent_prefix_id=test_prefix.id,
            prefix_length=25,
            status="active")
        ```

        :param str resource_name: The name of the resource.
        :param AvailablePrefixArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AvailablePrefixArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_pool: Optional[pulumi.Input[bool]] = None,
                 mark_utilized: Optional[pulumi.Input[bool]] = None,
                 parent_prefix_id: Optional[pulumi.Input[int]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AvailablePrefixArgs.__new__(AvailablePrefixArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["is_pool"] = is_pool
            __props__.__dict__["mark_utilized"] = mark_utilized
            if parent_prefix_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_prefix_id'")
            __props__.__dict__["parent_prefix_id"] = parent_prefix_id
            if prefix_length is None and not opts.urn:
                raise TypeError("Missing required property 'prefix_length'")
            __props__.__dict__["prefix_length"] = prefix_length
            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["site_id"] = site_id
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["vrf_id"] = vrf_id
            __props__.__dict__["prefix"] = None
        super(AvailablePrefix, __self__).__init__(
            'netbox:index/availablePrefix:AvailablePrefix',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_pool: Optional[pulumi.Input[bool]] = None,
            mark_utilized: Optional[pulumi.Input[bool]] = None,
            parent_prefix_id: Optional[pulumi.Input[int]] = None,
            prefix: Optional[pulumi.Input[str]] = None,
            prefix_length: Optional[pulumi.Input[int]] = None,
            role_id: Optional[pulumi.Input[int]] = None,
            site_id: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_id: Optional[pulumi.Input[int]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None,
            vrf_id: Optional[pulumi.Input[int]] = None) -> 'AvailablePrefix':
        """
        Get an existing AvailablePrefix resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AvailablePrefixState.__new__(_AvailablePrefixState)

        __props__.__dict__["description"] = description
        __props__.__dict__["is_pool"] = is_pool
        __props__.__dict__["mark_utilized"] = mark_utilized
        __props__.__dict__["parent_prefix_id"] = parent_prefix_id
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["prefix_length"] = prefix_length
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["vlan_id"] = vlan_id
        __props__.__dict__["vrf_id"] = vrf_id
        return AvailablePrefix(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isPool")
    def is_pool(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_pool")

    @property
    @pulumi.getter(name="markUtilized")
    def mark_utilized(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "mark_utilized")

    @property
    @pulumi.getter(name="parentPrefixId")
    def parent_prefix_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "parent_prefix_id")

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Output[int]:
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vrf_id")

