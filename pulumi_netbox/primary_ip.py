# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PrimaryIpArgs', 'PrimaryIp']

@pulumi.input_type
class PrimaryIpArgs:
    def __init__(__self__, *,
                 ip_address_id: pulumi.Input[int],
                 virtual_machine_id: pulumi.Input[int],
                 ip_address_version: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a PrimaryIp resource.
        """
        pulumi.set(__self__, "ip_address_id", ip_address_id)
        pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)
        if ip_address_version is not None:
            pulumi.set(__self__, "ip_address_version", ip_address_version)

    @property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "ip_address_id")

    @ip_address_id.setter
    def ip_address_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "ip_address_id", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "virtual_machine_id", value)

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_address_version")

    @ip_address_version.setter
    def ip_address_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_address_version", value)


@pulumi.input_type
class _PrimaryIpState:
    def __init__(__self__, *,
                 ip_address_id: Optional[pulumi.Input[int]] = None,
                 ip_address_version: Optional[pulumi.Input[int]] = None,
                 virtual_machine_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering PrimaryIp resources.
        """
        if ip_address_id is not None:
            pulumi.set(__self__, "ip_address_id", ip_address_id)
        if ip_address_version is not None:
            pulumi.set(__self__, "ip_address_version", ip_address_version)
        if virtual_machine_id is not None:
            pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_address_id")

    @ip_address_id.setter
    def ip_address_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_address_id", value)

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_address_version")

    @ip_address_version.setter
    def ip_address_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_address_version", value)

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_machine_id")

    @virtual_machine_id.setter
    def virtual_machine_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_machine_id", value)


class PrimaryIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_address_id: Optional[pulumi.Input[int]] = None,
                 ip_address_version: Optional[pulumi.Input[int]] = None,
                 virtual_machine_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource is used to define the primary IP for a given virtual machine. The primary IP is reflected in the Virtual machine Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrimaryIpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource is used to define the primary IP for a given virtual machine. The primary IP is reflected in the Virtual machine Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.

        :param str resource_name: The name of the resource.
        :param PrimaryIpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrimaryIpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_address_id: Optional[pulumi.Input[int]] = None,
                 ip_address_version: Optional[pulumi.Input[int]] = None,
                 virtual_machine_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrimaryIpArgs.__new__(PrimaryIpArgs)

            if ip_address_id is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address_id'")
            __props__.__dict__["ip_address_id"] = ip_address_id
            __props__.__dict__["ip_address_version"] = ip_address_version
            if virtual_machine_id is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_machine_id'")
            __props__.__dict__["virtual_machine_id"] = virtual_machine_id
        super(PrimaryIp, __self__).__init__(
            'netbox:index/primaryIp:PrimaryIp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ip_address_id: Optional[pulumi.Input[int]] = None,
            ip_address_version: Optional[pulumi.Input[int]] = None,
            virtual_machine_id: Optional[pulumi.Input[int]] = None) -> 'PrimaryIp':
        """
        Get an existing PrimaryIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrimaryIpState.__new__(_PrimaryIpState)

        __props__.__dict__["ip_address_id"] = ip_address_id
        __props__.__dict__["ip_address_version"] = ip_address_version
        __props__.__dict__["virtual_machine_id"] = virtual_machine_id
        return PrimaryIp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ip_address_id")

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "ip_address_version")

    @property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "virtual_machine_id")

